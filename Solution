Code :- 
        
        val yamlutil = ToscaExtensionYamlUtil()
        val toscaServiceModel: ToscaServiceModel
        val map: HashMap<String, ByteArray> = HashMap<String, ByteArray>()
      
        var artifactFileString: String = translation.result.substring(0, translation.result.indexOf("serviceTemplates"))
        var YamlString: String = translation.result.substring(translation.result.indexOf("serviceTemplates"))
        toscaServiceModel=yamlutil.yamlToObject<ToscaServiceModel>(YamlString,ToscaServiceModel::class.java)
        YamlString=""

        artifactFileString=artifactFileString.replace("artifactFiles:\n","").replace("files:\n","")
        while (artifactFileString.length>1){
            val largeFileName: String = artifactFileString.substring(0, artifactFileString.indexOf(":", 0)).trim()
            val start: Int = artifactFileString.indexOf(largeFileName)
            val firstN: Int = artifactFileString.indexOf("\n", start)
            var largeArtifactFileString = ""
            var mapString = ""
            if (artifactFileString.indexOf("\n", firstN + 1) != -1) {
                largeArtifactFileString = artifactFileString.substring(start, artifactFileString.indexOf("\n", firstN + 1))
                artifactFileString = artifactFileString.replace(largeArtifactFileString, "").trim()
                mapString = largeArtifactFileString.substring(largeArtifactFileString.indexOf("\n")).replace("\n", "").trim()
            }else{
                largeArtifactFileString = artifactFileString.substring(start, artifactFileString.length)
                mapString = largeArtifactFileString.substring(largeArtifactFileString.indexOf("\n")).replace("\n", "").trim()
                artifactFileString = artifactFileString.replace(largeArtifactFileString, "").trim()
            }
            map.put(largeFileName,mapString.toByteArray())
        }
        artifactFileString=""
        val files=FileContentHandler()
        files.putAll(map)
        toscaServiceModel.setArtifactFiles(files)

